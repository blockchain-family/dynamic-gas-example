pragma ever-solidity 0.64.0;

pragma AbiHeader time;
pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "@broxus/ever-contracts/contracts/libraries/MsgFlag.tsol";

import "./interfaces/IFoo.tsol";

import "./libraries/Errors.tsol";
import "./libraries/Gas.tsol";

contract Foo is IFoo {
    address static deployer;
    uint64 static nowTx;

    bool active;

    constructor() public {
        tvm.accept();
    }

    modifier onlyDeployer() {
        require(msg.sender == deployer, Errors.SENDER_IS_NOT_DEPLOYER);
        _;
    }

    function getActive() external view override responsible returns(bool) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS} active;
    }

    function setActive(bool _active) external override onlyDeployer {
        require(
            Gas.FOO_TARGET_BALANCE >= _calcValue(Gas.getSetActiveFoo()),
            Errors.VALUE_TOO_LOW
        );
        tvm.rawReserve(Gas.FOO_TARGET_BALANCE, 0);
        active = _active;
    }

    function _calcValue(IGasValueStructure.GasValue value) internal pure returns (uint128) {
        return value.fixedValue + gasToValue(value.dynamicGas, address(this).wid);
    }

}